// Mocks generated by Mockito 5.2.0 from annotations
// in wger/test/exercises/add_exercise_screen_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i13;
import 'dart:io' as _i12;
import 'dart:ui' as _i14;

import 'package:mockito/mockito.dart' as _i1;
import 'package:wger/models/exercises/alias.dart' as _i6;
import 'package:wger/models/exercises/base.dart' as _i3;
import 'package:wger/models/exercises/category.dart' as _i7;
import 'package:wger/models/exercises/equipment.dart' as _i8;
import 'package:wger/models/exercises/exercise.dart' as _i4;
import 'package:wger/models/exercises/language.dart' as _i10;
import 'package:wger/models/exercises/muscle.dart' as _i9;
import 'package:wger/models/exercises/variation.dart' as _i5;
import 'package:wger/providers/add_exercise_provider.dart' as _i11;
import 'package:wger/providers/base_provider.dart' as _i2;
import 'package:wger/providers/exercises.dart' as _i15;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeWgerBaseProvider_0 extends _i1.Fake implements _i2.WgerBaseProvider {
}

class _FakeExerciseBase_1 extends _i1.Fake implements _i3.ExerciseBase {}

class _FakeExercise_2 extends _i1.Fake implements _i4.Exercise {}

class _FakeVariation_3 extends _i1.Fake implements _i5.Variation {}

class _FakeAlias_4 extends _i1.Fake implements _i6.Alias {}

class _FakeExerciseCategory_5 extends _i1.Fake implements _i7.ExerciseCategory {
}

class _FakeEquipment_6 extends _i1.Fake implements _i8.Equipment {}

class _FakeMuscle_7 extends _i1.Fake implements _i9.Muscle {}

class _FakeLanguage_8 extends _i1.Fake implements _i10.Language {}

/// A class which mocks [AddExerciseProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddExerciseProvider extends _i1.Mock
    implements _i11.AddExerciseProvider {
  MockAddExerciseProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.WgerBaseProvider get baseProvider =>
      (super.noSuchMethod(Invocation.getter(#baseProvider),
          returnValue: _FakeWgerBaseProvider_0()) as _i2.WgerBaseProvider);
  @override
  set language(_i10.Language? _language) =>
      super.noSuchMethod(Invocation.setter(#language, _language),
          returnValueForMissingStub: null);
  @override
  set category(_i7.ExerciseCategory? _category) =>
      super.noSuchMethod(Invocation.setter(#category, _category),
          returnValueForMissingStub: null);
  @override
  List<_i12.File> get exerciseImages =>
      (super.noSuchMethod(Invocation.getter(#exerciseImages),
          returnValue: <_i12.File>[]) as List<_i12.File>);
  @override
  set exerciseNameEn(String? name) =>
      super.noSuchMethod(Invocation.setter(#exerciseNameEn, name),
          returnValueForMissingStub: null);
  @override
  set exerciseNameTrans(String? name) =>
      super.noSuchMethod(Invocation.setter(#exerciseNameTrans, name),
          returnValueForMissingStub: null);
  @override
  set descriptionEn(String? description) =>
      super.noSuchMethod(Invocation.setter(#descriptionEn, description),
          returnValueForMissingStub: null);
  @override
  set descriptionTrans(String? description) =>
      super.noSuchMethod(Invocation.setter(#descriptionTrans, description),
          returnValueForMissingStub: null);
  @override
  set alternateNamesEn(List<String>? names) =>
      super.noSuchMethod(Invocation.setter(#alternateNamesEn, names),
          returnValueForMissingStub: null);
  @override
  set alternateNamesTrans(List<String>? names) =>
      super.noSuchMethod(Invocation.setter(#alternateNamesTrans, names),
          returnValueForMissingStub: null);
  @override
  set equipment(List<_i8.Equipment>? equipment) =>
      super.noSuchMethod(Invocation.setter(#equipment, equipment),
          returnValueForMissingStub: null);
  @override
  List<_i8.Equipment> get equipment =>
      (super.noSuchMethod(Invocation.getter(#equipment),
          returnValue: <_i8.Equipment>[]) as List<_i8.Equipment>);
  @override
  bool get newVariation =>
      (super.noSuchMethod(Invocation.getter(#newVariation), returnValue: false)
          as bool);
  @override
  set newVariationForExercise(int? value) =>
      super.noSuchMethod(Invocation.setter(#newVariationForExercise, value),
          returnValueForMissingStub: null);
  @override
  set variationId(int? variation) =>
      super.noSuchMethod(Invocation.setter(#variationId, variation),
          returnValueForMissingStub: null);
  @override
  _i3.ExerciseBase get base => (super.noSuchMethod(Invocation.getter(#base),
      returnValue: _FakeExerciseBase_1()) as _i3.ExerciseBase);
  @override
  _i4.Exercise get exerciseEn =>
      (super.noSuchMethod(Invocation.getter(#exerciseEn),
          returnValue: _FakeExercise_2()) as _i4.Exercise);
  @override
  _i4.Exercise get exerciseTranslation =>
      (super.noSuchMethod(Invocation.getter(#exerciseTranslation),
          returnValue: _FakeExercise_2()) as _i4.Exercise);
  @override
  _i5.Variation get variation =>
      (super.noSuchMethod(Invocation.getter(#variation),
          returnValue: _FakeVariation_3()) as _i5.Variation);
  @override
  List<_i9.Muscle> get primaryMuscles =>
      (super.noSuchMethod(Invocation.getter(#primaryMuscles),
          returnValue: <_i9.Muscle>[]) as List<_i9.Muscle>);
  @override
  set primaryMuscles(List<_i9.Muscle>? muscles) =>
      super.noSuchMethod(Invocation.setter(#primaryMuscles, muscles),
          returnValueForMissingStub: null);
  @override
  List<_i9.Muscle> get secondaryMuscles =>
      (super.noSuchMethod(Invocation.getter(#secondaryMuscles),
          returnValue: <_i9.Muscle>[]) as List<_i9.Muscle>);
  @override
  set secondaryMuscles(List<_i9.Muscle>? muscles) =>
      super.noSuchMethod(Invocation.setter(#secondaryMuscles, muscles),
          returnValueForMissingStub: null);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  void clear() => super.noSuchMethod(Invocation.method(#clear, []),
      returnValueForMissingStub: null);
  @override
  void addExerciseImages(List<_i12.File>? exercises) =>
      super.noSuchMethod(Invocation.method(#addExerciseImages, [exercises]),
          returnValueForMissingStub: null);
  @override
  void removeExercise(String? path) =>
      super.noSuchMethod(Invocation.method(#removeExercise, [path]),
          returnValueForMissingStub: null);
  @override
  void printValues() => super.noSuchMethod(Invocation.method(#printValues, []),
      returnValueForMissingStub: null);
  @override
  _i13.Future<int> addExercise() =>
      (super.noSuchMethod(Invocation.method(#addExercise, []),
          returnValue: Future<int>.value(0)) as _i13.Future<int>);
  @override
  _i13.Future<_i3.ExerciseBase> addExerciseBase() => (super.noSuchMethod(
          Invocation.method(#addExerciseBase, []),
          returnValue: Future<_i3.ExerciseBase>.value(_FakeExerciseBase_1()))
      as _i13.Future<_i3.ExerciseBase>);
  @override
  _i13.Future<_i5.Variation> addVariation() =>
      (super.noSuchMethod(Invocation.method(#addVariation, []),
              returnValue: Future<_i5.Variation>.value(_FakeVariation_3()))
          as _i13.Future<_i5.Variation>);
  @override
  _i13.Future<void> addImages(_i3.ExerciseBase? base) => (super.noSuchMethod(
      Invocation.method(#addImages, [base]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i13.Future<void>);
  @override
  _i13.Future<_i4.Exercise> addExerciseTranslation(_i4.Exercise? exercise) =>
      (super.noSuchMethod(
              Invocation.method(#addExerciseTranslation, [exercise]),
              returnValue: Future<_i4.Exercise>.value(_FakeExercise_2()))
          as _i13.Future<_i4.Exercise>);
  @override
  _i13.Future<_i6.Alias> addExerciseAlias(String? name, int? exerciseId) =>
      (super.noSuchMethod(
              Invocation.method(#addExerciseAlias, [name, exerciseId]),
              returnValue: Future<_i6.Alias>.value(_FakeAlias_4()))
          as _i13.Future<_i6.Alias>);
  @override
  void addListener(_i14.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i14.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [ExercisesProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockExercisesProvider extends _i1.Mock implements _i15.ExercisesProvider {
  MockExercisesProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.WgerBaseProvider get baseProvider =>
      (super.noSuchMethod(Invocation.getter(#baseProvider),
          returnValue: _FakeWgerBaseProvider_0()) as _i2.WgerBaseProvider);
  @override
  set exerciseBases(List<_i3.ExerciseBase>? exercisesBases) =>
      super.noSuchMethod(Invocation.setter(#exerciseBases, exercisesBases),
          returnValueForMissingStub: null);
  @override
  List<_i3.ExerciseBase> get filteredExerciseBases =>
      (super.noSuchMethod(Invocation.getter(#filteredExerciseBases),
          returnValue: <_i3.ExerciseBase>[]) as List<_i3.ExerciseBase>);
  @override
  set filteredExerciseBases(List<_i3.ExerciseBase>? newFilteredExercises) =>
      super.noSuchMethod(
          Invocation.setter(#filteredExerciseBases, newFilteredExercises),
          returnValueForMissingStub: null);
  @override
  Map<int, List<_i3.ExerciseBase>> get exerciseBasesByVariation =>
      (super.noSuchMethod(Invocation.getter(#exerciseBasesByVariation),
              returnValue: <int, List<_i3.ExerciseBase>>{})
          as Map<int, List<_i3.ExerciseBase>>);
  @override
  List<_i3.ExerciseBase> get bases =>
      (super.noSuchMethod(Invocation.getter(#bases),
          returnValue: <_i3.ExerciseBase>[]) as List<_i3.ExerciseBase>);
  @override
  List<_i7.ExerciseCategory> get categories =>
      (super.noSuchMethod(Invocation.getter(#categories),
          returnValue: <_i7.ExerciseCategory>[]) as List<_i7.ExerciseCategory>);
  @override
  List<_i9.Muscle> get muscles =>
      (super.noSuchMethod(Invocation.getter(#muscles),
          returnValue: <_i9.Muscle>[]) as List<_i9.Muscle>);
  @override
  List<_i8.Equipment> get equipment =>
      (super.noSuchMethod(Invocation.getter(#equipment),
          returnValue: <_i8.Equipment>[]) as List<_i8.Equipment>);
  @override
  List<_i10.Language> get languages =>
      (super.noSuchMethod(Invocation.getter(#languages),
          returnValue: <_i10.Language>[]) as List<_i10.Language>);
  @override
  set languages(List<_i10.Language>? languages) =>
      super.noSuchMethod(Invocation.setter(#languages, languages),
          returnValueForMissingStub: null);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i13.Future<void> setFilters(_i15.Filters? newFilters) => (super.noSuchMethod(
      Invocation.method(#setFilters, [newFilters]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i13.Future<void>);
  @override
  _i13.Future<void> findByFilters() => (super.noSuchMethod(
      Invocation.method(#findByFilters, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i13.Future<void>);
  @override
  void clear() => super.noSuchMethod(Invocation.method(#clear, []),
      returnValueForMissingStub: null);
  @override
  _i3.ExerciseBase findExerciseBaseById(int? id) =>
      (super.noSuchMethod(Invocation.method(#findExerciseBaseById, [id]),
          returnValue: _FakeExerciseBase_1()) as _i3.ExerciseBase);
  @override
  List<_i3.ExerciseBase> findExerciseBasesByVariationId(int? id,
          {int? exerciseBaseIdToExclude}) =>
      (super.noSuchMethod(
          Invocation.method(#findExerciseBasesByVariationId, [id],
              {#exerciseBaseIdToExclude: exerciseBaseIdToExclude}),
          returnValue: <_i3.ExerciseBase>[]) as List<_i3.ExerciseBase>);
  @override
  _i7.ExerciseCategory findCategoryById(int? id) =>
      (super.noSuchMethod(Invocation.method(#findCategoryById, [id]),
          returnValue: _FakeExerciseCategory_5()) as _i7.ExerciseCategory);
  @override
  _i8.Equipment findEquipmentById(int? id) =>
      (super.noSuchMethod(Invocation.method(#findEquipmentById, [id]),
          returnValue: _FakeEquipment_6()) as _i8.Equipment);
  @override
  _i9.Muscle findMuscleById(int? id) =>
      (super.noSuchMethod(Invocation.method(#findMuscleById, [id]),
          returnValue: _FakeMuscle_7()) as _i9.Muscle);
  @override
  _i10.Language findLanguageById(int? id) =>
      (super.noSuchMethod(Invocation.method(#findLanguageById, [id]),
          returnValue: _FakeLanguage_8()) as _i10.Language);
  @override
  _i13.Future<void> fetchAndSetCategories() => (super.noSuchMethod(
      Invocation.method(#fetchAndSetCategories, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i13.Future<void>);
  @override
  _i13.Future<void> fetchAndSetVariations() => (super.noSuchMethod(
      Invocation.method(#fetchAndSetVariations, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i13.Future<void>);
  @override
  _i13.Future<void> fetchAndSetMuscles() => (super.noSuchMethod(
      Invocation.method(#fetchAndSetMuscles, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i13.Future<void>);
  @override
  _i13.Future<void> fetchAndSetEquipment() => (super.noSuchMethod(
      Invocation.method(#fetchAndSetEquipment, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i13.Future<void>);
  @override
  _i13.Future<void> fetchAndSetLanguages() => (super.noSuchMethod(
      Invocation.method(#fetchAndSetLanguages, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i13.Future<void>);
  @override
  _i13.Future<_i3.ExerciseBase> fetchAndSetExerciseBase(int? exerciseBaseId) =>
      (super.noSuchMethod(
              Invocation.method(#fetchAndSetExerciseBase, [exerciseBaseId]),
              returnValue:
                  Future<_i3.ExerciseBase>.value(_FakeExerciseBase_1()))
          as _i13.Future<_i3.ExerciseBase>);
  @override
  _i3.ExerciseBase readExerciseBaseFromBaseInfo(dynamic baseData) =>
      (super.noSuchMethod(
          Invocation.method(#readExerciseBaseFromBaseInfo, [baseData]),
          returnValue: _FakeExerciseBase_1()) as _i3.ExerciseBase);
  @override
  _i13.Future<void> checkExerciseCacheVersion() => (super.noSuchMethod(
      Invocation.method(#checkExerciseCacheVersion, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i13.Future<void>);
  @override
  _i13.Future<void> fetchAndSetExercises() => (super.noSuchMethod(
      Invocation.method(#fetchAndSetExercises, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i13.Future<void>);
  @override
  _i13.Future<List<_i3.ExerciseBase>> searchExercise(String? name,
          [String? languageCode = r'en']) =>
      (super.noSuchMethod(
              Invocation.method(#searchExercise, [name, languageCode]),
              returnValue:
                  Future<List<_i3.ExerciseBase>>.value(<_i3.ExerciseBase>[]))
          as _i13.Future<List<_i3.ExerciseBase>>);
  @override
  void addListener(_i14.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i14.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}
